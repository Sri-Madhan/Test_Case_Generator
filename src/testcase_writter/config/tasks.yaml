# research_task:
#   description: >
#     Conduct a thorough research about {topic}
#     Make sure you find any interesting and relevant information given
#     the current year is {current_year}.
#   expected_output: >
#     A list with 10 bullet points of the most relevant information about {topic}
#   agent: researcher

# reporting_task:
#   description: >
#     Review the context you got and expand each topic into a full section for a report.
#     Make sure the report is detailed and contains any and all relevant information.
#   expected_output: >
#     A fully fledged report with the main topics, each with a full section of information.
#     Formatted as markdown without '```'
#   agent: reporting_analyst

test_case_generation_task:
  description: >
    Generate structured test cases based on feature requirements. 
    Ensure all possible scenarios are covered, including normal and edge cases.
  expected_output: >
    A list of structured test cases with inputs, expected outputs, and test conditions.
  agent: test_case_generator
  context: []

edge_case_analysis_task:
  description: >
    Identify and analyze potential edge cases that could lead to unexpected behavior.
    Ensure all boundary values, invalid inputs, and stress conditions are considered.
  expected_output: >
    A list of identified edge cases along with corresponding test scenarios.
  agent: edge_case_analyzer
  context: [test_case_generation_task]

expected_output_prediction_task:
  description: >
    Predict the expected output for each generated test case, ensuring correctness based on functional behavior.
  expected_output: >
    A structured list of test cases with their expected outputs and validation criteria.
  agent: expected_output_predictor
  context: [edge_case_analysis_task]

coverage_evaluation_task:
  description: >
    Evaluate test coverage to identify any missing scenarios.
    Ensure that all functional flows, corner cases, and edge conditions are covered.
  expected_output: >
    A report highlighting test coverage gaps and suggesting additional test cases if needed.
  agent: test_coverage_evaluator
  context: [expected_output_prediction_task]

# optimization_task:
#   description: >
#     Optimize the test suite by removing redundant test cases while maintaining maximum coverage.
#     Prioritize test cases based on their effectiveness.
#   expected_output: >
#     An optimized test suite with reduced redundancy and improved efficiency.
#   agent: test_case_optimizer
#   context: [coverage_evaluation_task]

documentation_task:
  description: >
    Compile all finalized test cases, expected outputs, edge cases, and coverage reports into a structured document.
  expected_output: >
    A well-organized JSON file containing all test case details for reference and sharing.
  agent: test_case_documentation
  context: [coverage_evaluation_task]
